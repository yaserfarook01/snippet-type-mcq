{
        "Conceptual": {
        "Easy": "Q1. What is the primary purpose of {topic} in programming?\n1) To optimize code execution\n2) To manage memory allocation\n3) To handle user input and output\n4) To define the structure of data\nCorrect answer: 4\nDifficulty: Easy\nSubject: Computer Science\nTopic: {topic}\nSub-topic: Basics of {topic}\nTags: fundamentals, data structure\n\nQ2. Which of the following best describes {topic}?\n1) A method for sorting data\n2) A way to organize and store data\n3) A technique for encrypting information\n4) A protocol for network communication\nCorrect answer: 2\nDifficulty: Easy\nSubject: Computer Science\nTopic: {topic}\nSub-topic: Definition of {topic}\nTags: basics, terminology",
        "Medium": "Q1. How does {topic} differ from arrays in terms of memory allocation?\n1) {topic} always uses less memory than arrays\n2) {topic} allocates memory dynamically, while arrays have a fixed size\n3) {topic} can only store primitive data types, unlike arrays\n4) {topic} always uses more memory than arrays\nCorrect answer: 2\nDifficulty: Medium\nSubject: Computer Science\nTopic: {topic}\nSub-topic: Memory management in {topic}\nTags: memory allocation, dynamic sizing\n\nQ2. Which operation in {topic} typically has a time complexity of O(1)?\n1) Searching for an element\n2) Inserting an element at the beginning\n3) Sorting the entire structure\n4) Reversing the order of elements\nCorrect answer: 2\nDifficulty: Medium\nSubject: Computer Science\nTopic: {topic}\nSub-topic: Time complexity of {topic} operations\nTags: efficiency, algorithms",
        "Hard": "Q1. In what scenario would using {topic} be disadvantageous compared to a hash table?\n1) When frequent insertions and deletions are required\n2) When elements need to be stored in a sorted order\n3) When constant-time access to elements is crucial\n4) When memory usage needs to be minimized\nCorrect answer: 3\nDifficulty: Hard\nSubject: Computer Science\nTopic: {topic}\nSub-topic: Comparative analysis of data structures\nTags: performance, use cases\n\nQ2. Which of the following statements about {topic} in concurrent programming is true?\n1) {topic} are inherently thread-safe and require no additional synchronization\n2) {topic} cannot be used in multi-threaded applications\n3) {topic} require careful synchronization to prevent race conditions\n4) {topic} automatically handle all concurrency issues\nCorrect answer: 3\nDifficulty: Hard\nSubject: Computer Science\nTopic: {topic}\nSub-topic: Concurrency and {topic}\nTags: multi-threading, synchronization"
        },
        "Factual": {
        "Easy": "Q1. In a software development company, Sarah is working on a project that heavily uses {topic}. Which of the following best describes her likely day-to-day tasks?\n1) Writing complex SQL queries\n2) Designing user interfaces\n3) Implementing and manipulating {topic} data structures\n4) Configuring network protocols\nCorrect answer: 3\nDifficulty: Easy\nSubject: Software Development\nTopic: {topic}\nSub-topic: Practical application of {topic}\nTags: job roles, daily tasks\n\nQ2. Alex and Jamie are discussing the benefits of {topic} in their coding bootcamp. Which advantage would they most likely mention first?\n1) It makes the code run faster\n2) It reduces the need for comments\n3) It organizes data in a more structured way\n4) It automatically fixes bugs in the code\nCorrect answer: 3\nDifficulty: Easy\nSubject: Programming Basics\nTopic: {topic}\nSub-topic: Advantages of {topic}\nTags: benefits, data organization",
        "Medium": "Q1. A startup is developing a new app that requires efficient data storage and retrieval. The lead developer, Maya, suggests using {topic}. What scenario best justifies her recommendation?\n1) The app needs to perform complex mathematical calculations\n2) The data needs to be accessed in a specific order\n3) The app requires frequent insertions and deletions of data\n4) The app needs to support undo/redo functionality\nCorrect answer: 3\nDifficulty: Medium\nSubject: Software Architecture\nTopic: {topic}\nSub-topic: Use cases for {topic}\nTags: application design, data management\n\nQ2. During a code review, Raj notices that his colleague has used an array instead of {topic} for storing a collection of items. In which situation would Raj most likely suggest switching to {topic}?\n1) When the collection size is fixed and known in advance\n2) When elements need to be frequently added or removed from the middle of the collection\n3) When the data needs to be sorted in ascending order\n4) When the collection only contains primitive data types\nCorrect answer: 2\nDifficulty: Medium\nSubject: Code Optimization\nTopic: {topic}\nSub-topic: Choosing between data structures\nTags: performance, code review",
        "Hard": "Q1. In a high-frequency trading firm, the CTO is evaluating different data structures for their new algorithm. They're considering {topic} for its potential advantages. In which scenario would {topic} be the optimal choice over other data structures?\n1) When the algorithm needs to maintain a sorted list of stock prices\n2) When the system needs to quickly find the median stock price\n3) When the trading strategy involves frequent insertions and deletions at both ends of the data set\n4) When the algorithm needs to perform range queries on stock prices\nCorrect answer: 3\nDifficulty: Hard\nSubject: Financial Software Engineering\nTopic: {topic}\nSub-topic: Advanced applications of {topic}\nTags: high-frequency trading, algorithm design\n\nQ2. A team of researchers is developing a new compression algorithm that utilizes properties of {topic}. During a presentation, a colleague asks about the algorithm's space complexity. Which statement about {topic} in this context is most likely to be true?\n1) The space complexity is always O(1) regardless of the input size\n2) The space complexity depends on the specific implementation of {topic} used\n3) {topic} guarantees a space complexity of O(log n) in all cases\n4) The space complexity is directly proportional to the compression ratio achieved\nCorrect answer: 2\nDifficulty: Hard\nSubject: Algorithm Analysis\nTopic: {topic}\nSub-topic: Space complexity of {topic} in compression algorithms\nTags: research, theoretical computer science"
        },
        "Problem-solving": {
          "Output prediction": {
            "Easy": "Q1. What will be the output of the following code snippet?\n```python\nx = 5\ny = 2\nprint(x + y, x * y)\n```\n1) 7 10\n2) 7 7\n3) 5 2\n4) 10 7\nCorrect answer: 1\nDifficulty: Easy\nSubject: Programming\nTopic: Basic Operations\nSub-topic: Arithmetic operations\nTags: output prediction, basic math",
            "Medium": "Q1. What will be the output of the following code?\n```python\ndef func(x, y):\n    return x * y if x > y else x + y\n\nprint(func(3, 4), func(5, 2))\n```\n1) 7 10\n2) 12 7\n3) 7 7\n4) 12 10\nCorrect answer: 2\nDifficulty: Medium\nSubject: Programming\nTopic: Functions\nSub-topic: Conditional expressions\nTags: output prediction, function behavior",
            "Hard": "Q1. What will be the output of this recursive function?\n```python\ndef mystery(n):\n    if n <= 1:\n        return n\n    return mystery(n-1) + mystery(n-2)\n\nprint(mystery(5))\n```\n1) 5\n2) 8\n3) 13\n4) 21\nCorrect answer: 2\nDifficulty: Hard\nSubject: Programming\nTopic: Recursion\nSub-topic: Fibonacci sequence\nTags: output prediction, recursive functions"
          },
          "Error identification": {
            "Easy": "Q1. Which line contains an error in the following code?\n```python\n1  x = 10\n2  y = 20\n3  z = x + y\n4  print(x, y z)\n```\n1) Line 1\n2) Line 2\n3) Line 3\n4) Line 4\nCorrect answer: 4\nDifficulty: Easy\nSubject: Programming\nTopic: Syntax\nSub-topic: Print statement\nTags: error identification, syntax error",
            "Medium": "Q1. Which line contains a logical error in the following code?\n```python\n1  def calculate_average(numbers):\n2      total = 0\n3      for num in numbers:\n4          total += num\n5      return total / len(numbers) - 1\n```\n1) Line 2\n2) Line 3\n3) Line 4\n4) Line 5\nCorrect answer: 4\nDifficulty: Medium\nSubject: Programming\nTopic: Functions\nSub-topic: Average calculation\nTags: error identification, logical error",
            "Hard": "Q1. Which line contains an error that would cause incorrect behavior in certain cases?\n```python\n1  def binary_search(arr, target):\n2      left, right = 0, len(arr) - 1\n3      while left < right:\n4          mid = (left + right) // 2\n5          if arr[mid] == target:\n6              return mid\n7          elif arr[mid] < target:\n8              left = mid + 1\n9          else:\n10             right = mid\n11     return -1\n```\n1) Line 3\n2) Line 4\n3) Line 8\n4) Line 10\nCorrect answer: 1\nDifficulty: Hard\nSubject: Algorithms\nTopic: Searching\nSub-topic: Binary search\nTags: error identification, algorithm implementation"
          },
          "Debugging": {
            "Easy": "Q1. What change needs to be made to fix the bug in this code?\n```python\ndef greet(name):\n    print(\"Hello\" + name)\n\ngreet(\"Alice\")\n```\n1) Change \"Hello\" to \"Hello \"\n2) Change + to ,\n3) Add parentheses around name\n4) No change needed\nCorrect answer: 1\nDifficulty: Easy\nSubject: Programming\nTopic: String Concatenation\nSub-topic: Print formatting\nTags: debugging, string operations",
            "Medium": "Q1. What change needs to be made to fix the bug in this code?\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n)\n\nprint(factorial(5))\n```\n1) Change return n * factorial(n) to return n * factorial(n-1)\n2) Change if n == 0 to if n <= 1\n3) Add a base case for n == 1\n4) Change return 1 to return 0\nCorrect answer: 1\nDifficulty: Medium\nSubject: Programming\nTopic: Recursion\nSub-topic: Factorial calculation\nTags: debugging, recursive functions",
            "Hard": "Q1. What change needs to be made to fix the bug in this code?\n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\ndef reverse_linked_list(head):\n    prev = None\n    current = head\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    return current\n\nhead = Node(1)\nhead.next = Node(2)\nhead.next.next = Node(3)\nnew_head = reverse_linked_list(head)\n```\n1) Change return current to return prev\n2) Add head.next = None after the while loop\n3) Change while current to while current.next\n4) Swap prev and current in the while loop\nCorrect answer: 1\nDifficulty: Hard\nSubject: Data Structures\nTopic: Linked Lists\nSub-topic: Reversing a linked list\nTags: debugging, linked list operations"
          },
          "Code completion": {
            "Easy": "Q1. Complete the following Java code to print all the elements in an array in reverse order:\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        for (int i = arr.length - 1; i >= 0; i--) {\n            ______\n        }\n    }\n}\n```\n1) System.out.print(arr[i]);\n2) System.out.println(arr[i]);\n3) System.out.print(arr[i] + \" \");\n4) System.out.println(arr[i] + \" \");\nCorrect answer: 3\nDifficulty: Easy\nSubject: Programming\nTopic: Loops\nSub-topic: Array iteration\nTags: code completion, reverse array printing",
            "Medium": "Q1. Complete the following Java code to reverse the elements of an array in place:\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {3, 7, 1, 8, 2};\n        reverseArray(arr);\n        printArray(arr);\n    }\n\n    public static void reverseArray(int[] arr) {\n        for (int i = 0; i < arr.length / 2; i++) {\n            ______\n        }\n    }\n\n    public static void printArray(int[] arr) {\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n1) arr[i] = arr[arr.length - i]\n2) int temp = arr[i]; arr[i] = arr[arr.length - 1 - i]; arr[arr.length - 1 - i] = temp;\n3) int temp = arr[i]; arr[i] = arr[arr.length - i]; arr[arr.length - i] = temp;\n4) arr[i] = arr[arr.length - 1 - i]\nCorrect answer: 2\nDifficulty: Medium\nSubject: Programming\nTopic: Arrays\nSub-topic: Array manipulation\nTags: code completion, array reversal",
            "Hard": "Q1. Complete the following Java code to calculate a sum where elements at even indices are added and elements at odd indices are subtracted:\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {3, 1, 4, 1, 5, 9};\n        int result = processArray(arr);\n        System.out.println(\"Result: \" + result);\n    }\n\n    public static int processArray(int[] arr) {\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (i % 2 == 0) {\n                sum += arr[i];\n            } else {\n                ______\n            }\n        }\n        return sum;\n    }\n}\n```\n1) sum += arr[i];\n2) sum -= arr[i];\n3) sum = sum - arr[i];\n4) sum = arr[i] - sum;\nCorrect answer: 2\nDifficulty: Hard\nSubject: Programming\nTopic: Arrays\nSub-topic: Array manipulation\nTags: code completion, array sum calculation"
          },
          "Time complexity": {
            "Easy": "Q1. What is the time complexity of the following code?\n```python\ndef find_max(arr):\n    max_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val\n```\n1) O(1)\n2) O(log n)\n3) O(n)\n4) O(n^2)\nCorrect answer: 3\nDifficulty: Easy\nSubject: Algorithm Analysis\nTopic: Time Complexity\nSub-topic: Linear search\nTags: time complexity, array operations",
            "Medium": "Q1. What is the time complexity of the following code?\n```python\ndef matrix_sum(matrix):\n    total = 0\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            total += matrix[i][j]\n    return total\n```\n1) O(n)\n2) O(n log n)\n3) O(n^2)\n4) O(2^n)\nCorrect answer: 3\nDifficulty: Medium\nSubject: Algorithm Analysis\nTopic: Time Complexity\nSub-topic: Nested loops\nTags: time complexity, matrix operations",
            "Hard": "Q1. What is the average-case time complexity of the following quicksort implementation?\n```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n```\n1) O(n)\n2) O(n log n)\n3) O(n^2)\n4) O(log n)\nCorrect answer: 2\nDifficulty: Hard\nSubject: Algorithm Analysis\nTopic: Time Complexity\nSub-topic: Quicksort\nTags: time complexity, sorting algorithms"
          },
          "Space complexity": {
            "Easy": "Q1. What is the space complexity of the following code?\n```python\ndef double_array(arr):\n    result = []\n    for num in arr:\n        result.append(num * 2)\n    return result\n```\n1) O(1)\n2) O(log n)\n3) O(n)\n4) O(n^2)\nCorrect answer: 3\nDifficulty: Easy\nSubject: Algorithm Analysis\nTopic: Space Complexity\nSub-topic: Array operations\nTags: space complexity, list comprehension",
            "Medium": "Q1. What is the space complexity of the following recursive function?\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n```\n1) O(1)\n2) O(log n)\n3) O(n)\n4) O(n!)\nCorrect answer: 3\nDifficulty: Medium\nSubject: Algorithm Analysis\nTopic: Space Complexity\nSub-topic: Recursive functions\nTags: space complexity, factorial calculation",
            "Hard": "Q1. What is the space complexity of the following implementation of the Floyd-Warshall algorithm?\n```python\ndef floyd_warshall(graph):\n    n = len(graph)\n    dist = [[float('inf')] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            dist[i][j] = graph[i][j]\n    \n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    \n    return dist\n```\n1) O(n)\n2) O(n^2)\n3) O(n^3)\n4) O(2^n)\nCorrect answer: 2\nDifficulty: Hard\nSubject: Algorithm Analysis\nTopic: Space Complexity\nSub-topic: Dynamic programming\nTags: space complexity, graph algorithms"
          },
          "Concept identification": {
            "Easy": "Q1. Which programming concept is primarily demonstrated in the following code?\n```python\nnumbers = [1, 2, 3, 4, 5]\nsquared = [x ** 2 for x in numbers]\n```\n1) Inheritance\n2) Polymorphism\n3) List comprehension\n4) Encapsulation\nCorrect answer: 3\nDifficulty: Easy\nSubject: Programming\nTopic: Python Features\nSub-topic: List operations\nTags: concept identification, list comprehension",
            "Medium": "Q1. Which programming concept is primarily demonstrated in the following code?\n```python\nclass Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n```\n1) Encapsulation\n2) Polymorphism\n3) Abstraction\n4) Composition\nCorrect answer: 2\nDifficulty: Medium\nSubject: Object-Oriented Programming\nTopic: OOP Concepts\nSub-topic: Polymorphism\nTags: concept identification, class hierarchy",
            "Hard": "Q1. Which design pattern is demonstrated in the following code?\n```python\nclass Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\n    def __init__(self):\n        self.value = None\n```\n1) Factory Pattern\n2) Observer Pattern\n3) Singleton Pattern\n4) Decorator Pattern\nCorrect answer: 3\nDifficulty: Hard\nSubject: Software Design\nTopic: Design Patterns\nSub-topic: Creational Patterns\nTags: concept identification, singleton pattern"
          },
          "Best practices": {
            "Easy": "Q1. Which of the following is a better variable naming convention in Python?\n1) camelCase\n2) PascalCase\n3) snake_case\n4) ALL_CAPS\nCorrect answer: 3\nDifficulty: Easy\nSubject: Programming\nTopic: Code Style\nSub-topic: Naming conventions\nTags: best practices, PEP 8",
            "Medium": "Q1. Which of the following is the most Pythonic way to check if a key exists in a dictionary?\n1) if 'key' in dict.keys():\n2) if dict.has_key('key'):\n3) if 'key' in dict:\n4) if dict.get('key') is not None:\nCorrect answer: 3\nDifficulty: Medium\nSubject: Programming\nTopic: Python Idioms\nSub-topic: Dictionary operations\nTags: best practices, Pythonic code",
            "Hard": "Q1. Which of the following is the most efficient and Pythonic way to merge two dictionaries in Python 3.9+?\n1) merged = dict1.copy(); merged.update(dict2)\n2) merged = {**dict1, **dict2}\n3) merged = dict1 | dict2\n4) merged = dict(list(dict1.items()) + list(dict2.items()))\nCorrect answer: 3\nDifficulty: Hard\nSubject: Programming\nTopic: Python Features\nSub-topic: Dictionary operations\nTags: best practices, Python 3.9+"
          },
          "Function behavior": {
            "Easy": "Q1. What does the following function do?\n```python\ndef mystery_func(x, y):\n    return x + y\n```\n1) Multiplies x and y\n2) Adds x and y\n3) Subtracts y from x\n4) Divides x by y\nCorrect answer: 2\nDifficulty: Easy\nSubject: Programming\nTopic: Functions\nSub-topic: Basic operations\nTags: function behavior, arithmetic",
            "Medium": "Q1. What does the following function do?\n```python\ndef process_list(lst):\n    return [x for x in lst if x % 2 == 0]\n```\n1) Returns a list of odd numbers\n2) Returns a list of even numbers\n3) Returns a list of prime numbers\n4) Returns a list of squared numbers\nCorrect answer: 2\nDifficulty: Medium\nSubject: Programming\nTopic: List Comprehension\nSub-topic: Filtering\nTags: function behavior, list operations",
            "Hard": "Q1. What does the following recursive function do?\n```python\ndef mystery_func(n, m):\n    if m == 0:\n        return n\n    return mystery_func(m, n % m)\n```\n1) Calculates the least common multiple of n and m\n2) Calculates the greatest common divisor of n and m\n3) Calculates n raised to the power of m\n4) Calculates the modulus of n and m\nCorrect answer: 2\nDifficulty: Hard\nSubject: Programming\nTopic: Recursion\nSub-topic: Number theory\nTags: function behavior, Euclidean algorithm"
          },
          "Variable state": {
            "Easy": "Q1. What will be the value of `x` after the following code executes?\n```python\nx = 5\ny = x\nx += 3\n```\n1) 5\n2) 8\n3) 3\n4) 15\nCorrect answer: 2\nDifficulty: Easy\nSubject: Programming\nTopic: Variables\nSub-topic: Assignment operations\nTags: variable state, basic operations",
            "Medium": "Q1. What will be the value of `lst` after the following code executes?\n```python\nlst = [1, 2, 3]\nlst.extend([4, 5])\nlst.append([6, 7])\n```\n1) [1, 2, 3, 4, 5, 6, 7]\n2) [1, 2, 3, 4, 5, [6, 7]]\n3) [1, 2, 3, [4, 5], [6, 7]]\n4) [[1, 2, 3], [4, 5], [6, 7]]\nCorrect answer: 2\nDifficulty: Medium\nSubject: Programming\nTopic: Lists\nSub-topic: List operations\nTags: variable state, list methods",
            "Hard": "Q1. What will be the value of `d` after the following code executes?\n```python\nd = {'a': 1, 'b': 2}\nd.update({'b': 3, 'c': 4})\nd['a'] += d.pop('c')\n```\n1) {'a': 1, 'b': 3, 'c': 4}\n2) {'a': 5, 'b': 3}\n3) {'a': 1, 'b': 3}\n4) {'a': 4, 'b': 3}\nCorrect answer: 2\nDifficulty: Hard\nSubject: Programming\nTopic: Dictionaries\nSub-topic: Dictionary operations\nTags: variable state, dictionary methods"
          },
          "Logical equivalence": {
            "Easy": "Q1. Which of the following is logically equivalent to the given expression?\nx > 5 and x < 10\n1) 5 < x < 10\n2) not (x <= 5 or x >= 10)\n3) x >= 5 and x <= 10\n4) x > 5 or x < 10\nCorrect answer: 2\nDifficulty: Easy\nSubject: Programming\nTopic: Boolean Logic\nSub-topic: Compound conditions\nTags: logical equivalence, boolean operations",
            "Medium": "Q1. Which of the following is logically equivalent to the given code?\n```python\nresult = []\nfor i in range(10):\n    if i % 2 == 0:\n        result.append(i * 2)\n```\n1) result = [i * 2 for i in range(10) if i % 2 == 0]\n2) result = [i for i in range(20) if i % 4 == 0]\n3) result = list(filter(lambda x: x % 2 == 0, range(20)))\n4) result = [i * 2 for i in range(5)]\nCorrect answer: 1\nDifficulty: Medium\nSubject: Programming\nTopic: List Comprehension\nSub-topic: Conditional list comprehension\nTags: logical equivalence, code transformation",
            "Hard": "Q1. Which of the following recursive functions is logically equivalent to the iterative factorial function?\n\nIterative function:\n```python\ndef factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```\n1) ```python\ndef factorial_recursive(n):\n    if n == 0:\n        return 1\n    return n * factorial_recursive(n - 1)\n```\n2) ```python\ndef factorial_recursive(n):\n    if n <= 1:\n        return 1\n    return n + factorial_recursive(n - 1)\n```\n3) ```python\ndef factorial_recursive(n):\n    if n == 0:\n        return 0\n    return n * factorial_recursive(n - 1)\n```\n4) ```python\ndef factorial_recursive(n):\n    return n if n <= 1 else n * factorial_recursive(n - 2)\n```\nCorrect answer: 1\nDifficulty: Hard\nSubject: Programming\nTopic: Recursion\nSub-topic: Factorial calculation\nTags: logical equivalence, recursive vs iterative"
          },
          "Code optimization": {
            "Easy": "Q1. Which option provides a more optimized version of this code?\n```python\nresult = []\nfor i in range(10):\n    result.append(i * 2)\n```\n1) result = [i * 2 for i in range(10)]\n2) result = list(map(lambda x: x * 2, range(10)))\n3) result = [x for x in range(20) if x % 2 == 0]\n4) Both 1 and 2 are optimized versions\nCorrect answer: 4\nDifficulty: Easy\nSubject: Programming\nTopic: List Operations\nSub-topic: List comprehension and map\nTags: code optimization, Pythonic code",
            "Medium": "Q1. Which option provides a more optimized version of this code for checking if a number is prime?\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n```\n1) ```python\ndef is_prime(n):\n    return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n```\n2) ```python\ndef is_prime(n):\n    return n > 1 and not any(n % i == 0 for i in range(2, n))\n```\n3) ```python\ndef is_prime(n):\n    return n > 1 and len([i for i in range(2, n) if n % i == 0]) == 0\n```\n4) ```python\ndef is_prime(n):\n    return n > 1 and sum(1 for i in range(2, n) if n % i == 0) == 0\n```\nCorrect answer: 1\nDifficulty: Medium\nSubject: Programming\nTopic: Number Theory\nSub-topic: Prime number checking\nTags: code optimization, algorithm efficiency",
            "Hard": "Q1. Which option provides the most optimized version of this code for finding the nth Fibonacci number?\n```python\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n```\n1) ```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n```\n2) ```python\ndef fibonacci(n):\n    return round(((1 + 5 ** 0.5) / 2) ** n / 5 ** 0.5)\n```\n3) ```python\ndef fibonacci(n):\n    return sum(fibonacci(i) for i in range(n-1))\n```\n4) ```python\ndef fibonacci(n):\n    return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)\n```\nCorrect answer: 2\nDifficulty: Hard\nSubject: Programming\nTopic: Dynamic Programming\nSub-topic: Fibonacci sequence\nTags: code optimization, mathematical approach"
          },
          "Algorithm selection": {
            "Easy": "Q1. Which sorting algorithm would be most appropriate for sorting a small list of integers (less than 10 elements)?\n1) Quicksort\n2) Mergesort\n3) Insertion Sort\n4) Heap Sort\nCorrect answer: 3\nDifficulty: Easy\nSubject: Algorithms\nTopic: Sorting\nSub-topic: Simple sorting algorithms\nTags: algorithm selection, small datasets",
            "Medium": "Q1. Which algorithm would be most efficient for finding the shortest path between two points in an unweighted graph?\n1) Dijkstra's Algorithm\n2) Breadth-First Search\n3) Depth-First Search\n4) Floyd-Warshall Algorithm\nCorrect answer: 2\nDifficulty: Medium\nSubject: Algorithms\nTopic: Graph Traversal\nSub-topic: Shortest path\nTags: algorithm selection, unweighted graphs",
            "Hard": "Q1. Which algorithm would be most appropriate for finding the longest common subsequence of two strings with lengths n and m, where space complexity is a critical concern?\n1) Dynamic Programming with O(nm) space\n2) Dynamic Programming with O(min(n,m)) space\n3) Recursive approach with memoization\n4) Brute force approach\nCorrect answer: 2\nDifficulty: Hard\nSubject: Algorithms\nTopic: Dynamic Programming\nSub-topic: String algorithms\nTags: algorithm selection, space optimization"
          }
        },
    "Scenario-based": {
      "Easy": "Q1. Mike is working on a project that requires storing a list of employee names. Which {topic} would be most appropriate for this task?\n1) Dictionary\n2) Set\n3) List\n4) Tuple\nCorrect answer: 3\nDifficulty: Easy\nSubject: Data Structures\nTopic: {topic}\nSub-topic: Choosing appropriate data structures\nTags: practical application, basic data structures\n\nQ2. Sarah needs to keep track of unique user IDs for a website. Which {topic} would be most efficient for this purpose?\n1) List\n2) Set\n3) Dictionary\n4) Array\nCorrect answer: 2\nDifficulty: Easy\nSubject: Data Structures\nTopic: {topic}\nSub-topic: Efficient data storage\nTags: unique elements, performance",
      "Medium": "Q1. A software company is developing a contact management system. They need to store names (strings) and associate them with phone numbers (integers). Which {topic} would be most suitable for this task?\n1) List of tuples\n2) Dictionary\n3) Set\n4) Array of arrays\nCorrect answer: 2\nDifficulty: Medium\nSubject: Data Structures\nTopic: {topic}\nSub-topic: Key-value pair storage\nTags: associative arrays, lookup efficiency\n\nQ2. John is implementing a feature that needs to maintain the order of insertion of elements while also ensuring quick lookup by a unique identifier. Which {topic} in Python 3.7+ would be most appropriate?\n1) List\n2) Dictionary\n3) OrderedDict\n4) Set\nCorrect answer: 2\nDifficulty: Medium\nSubject: Data Structures\nTopic: {topic}\nSub-topic: Ordered key-value storage\nTags: Python 3.7+, insertion order",
      "Hard": "Q1. A financial trading platform needs to implement a data structure for their order book. The structure must support fast insertion, deletion, and lookup of orders by price, as well as quick access to the highest and lowest prices. Which combination of {topic} would be most efficient?\n1) Dictionary and two heaps\n2) Balanced binary search tree\n3) Array and hash table\n4) Linked list and dictionary\nCorrect answer: 1\nDifficulty: Hard\nSubject: Data Structures\nTopic: {topic}\nSub-topic: Complex data structure design\nTags: financial systems, performance optimization\n\nQ2. A social media platform is designing a caching system for user profiles. The cache needs to store a limited number of profiles, evict the least recently accessed profile when full, and provide fast access to profiles. Which combination of {topic} would be most suitable?\n1) Dictionary and queue\n2) List and set\n3) Dictionary and doubly linked list\n4) Array and binary search tree\nCorrect answer: 3\nDifficulty: Hard\nSubject: Data Structures\nTopic: {topic}\nSub-topic: Cache implementation\nTags: LRU cache, efficient data access"
    }
  }
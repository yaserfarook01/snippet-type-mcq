{
    "Conceptual": "Focus on theoretical understanding of {topic}. Questions should test knowledge of definitions, principles, and concepts without necessarily involving code.",
    "Factual": "Emphasize specific facts, rules, or characteristics related to {topic}. Questions should test recall and precise knowledge of {topic}.",
    "Problem-solving": "For problem-solving questions related to {topic}, provide code snippets where required and focus on the following types of questions:\n\n1. Output prediction: \"What will be the output of the following code that demonstrates {topic}?\"\n2. Error identification: \"Which line contains an error related to {topic} in the code below?\"\n3. Debugging: \"What change needs to be made to fix the bug related to {topic} in this code?\"\n4. Code completion: \"Which option correctly completes the missing part of this code related to {topic}?\"\n5. Time complexity: \"What is the time complexity of the following algorithm related to {topic}?\"\n6. Space complexity: \"What is the space complexity of the following function implementing {topic}?\"\n7. Concept identification: \"Which {topic}-related concept is demonstrated in this snippet?\"\n8. Best practices: \"Which of the following changes would improve the code's use of {topic}?\"\n9. Function behavior: \"What does the following function do with respect to {topic}?\"\n10. Variable state: \"What will be the value of variable X after this code related to {topic} executes?\"\n11. Logical equivalence: \"Which of the following code snippets is logically equivalent to the given code in terms of {topic}?\"\n12. Code optimization: \"Which option provides the most optimized version of this code with respect to {topic}?\"\n13. Algorithm selection: \"Which algorithm is most appropriate for implementing this {topic}-related functionality?\"\n\nEnsure a mix of these question types in your generated MCQs, always focusing on {topic}. For debugging questions, always provide the options in code format. Use pseudocode or a general programming syntax that can be easily understood across different programming languages.",
    "Scenario-based": "Create scenario-based questions related to {topic}. Each question should present a real-world scenario where {topic} is applied. The scenarios should be relevant to software development, data analysis, or general programming contexts. Ensure that the scenarios are clear, concise, and directly related to the application of {topic}."
  }